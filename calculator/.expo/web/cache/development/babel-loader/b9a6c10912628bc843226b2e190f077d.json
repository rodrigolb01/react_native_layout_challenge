{"ast":null,"code":"import React from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar screen = Dimensions.get(\"window\");\nvar buttonWidth = screen.width / 4;\nvar styles = StyleSheet.create({\n  text: {\n    color: \"#fff\",\n    fontSize: 25\n  },\n  textSecondary: {\n    color: \"#060606\"\n  },\n  button: {\n    backgroundColor: \"#333333\",\n    flex: 1,\n    height: Math.floor(buttonWidth - 10),\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: Math.floor(buttonWidth),\n    margin: 5\n  },\n  buttonDouble: {\n    width: screen.width / 2 - 10,\n    flex: 0,\n    alignItems: \"flex-start\",\n    paddingLeft: 40\n  },\n  buttonSecondary: {\n    backgroundColor: \"#a6a6a6\"\n  },\n  buttonAccent: {\n    backgroundColor: \"#f09a36\"\n  }\n});\nexport default (function (_ref) {\n  var onPress = _ref.onPress,\n      text = _ref.text,\n      size = _ref.size,\n      theme = _ref.theme;\n  var buttonStyles = [styles.button];\n  var textStyles = [styles.text];\n\n  if (size === \"double\") {\n    buttonStyles.push(styles.buttonDouble);\n  }\n\n  if (theme === \"secondary\") {\n    buttonStyles.push(styles.buttonSecondary);\n    textStyles.push(styles.textSecondary);\n  } else if (theme === \"accent\") {\n    buttonStyles.push(styles.buttonAccent);\n  }\n\n  return _jsx(TouchableOpacity, {\n    onPress: onPress,\n    style: buttonStyles,\n    children: _jsx(Text, {\n      style: textStyles,\n      children: text\n    })\n  });\n});","map":{"version":3,"sources":["C:/Users/Rodrigo/Desktop/Leassons and Assignments/DSMobile/Entrega01 v2/calculator/calculator/src/components/Button.js"],"names":["React","screen","Dimensions","get","buttonWidth","width","styles","StyleSheet","create","text","color","fontSize","textSecondary","button","backgroundColor","flex","height","Math","floor","alignItems","justifyContent","borderRadius","margin","buttonDouble","paddingLeft","buttonSecondary","buttonAccent","onPress","size","theme","buttonStyles","textStyles","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACA,IAAMC,WAAW,GAAGH,MAAM,CAACI,KAAP,GAAe,CAAnC;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GADyB;AAK/BC,EAAAA,aAAa,EAAE;AACbF,IAAAA,KAAK,EAAE;AADM,GALgB;AAQ/BG,EAAAA,MAAM,EAAE;AACNC,IAAAA,eAAe,EAAE,SADX;AAENC,IAAAA,IAAI,EAAE,CAFA;AAGNC,IAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWd,WAAW,GAAG,EAAzB,CAHF;AAINe,IAAAA,UAAU,EAAE,QAJN;AAKNC,IAAAA,cAAc,EAAE,QALV;AAMNC,IAAAA,YAAY,EAAEJ,IAAI,CAACC,KAAL,CAAWd,WAAX,CANR;AAONkB,IAAAA,MAAM,EAAE;AAPF,GARuB;AAiB/BC,EAAAA,YAAY,EAAE;AACZlB,IAAAA,KAAK,EAAEJ,MAAM,CAACI,KAAP,GAAe,CAAf,GAAmB,EADd;AAEZU,IAAAA,IAAI,EAAE,CAFM;AAGZI,IAAAA,UAAU,EAAE,YAHA;AAIZK,IAAAA,WAAW,EAAE;AAJD,GAjBiB;AAuB/BC,EAAAA,eAAe,EAAE;AACfX,IAAAA,eAAe,EAAE;AADF,GAvBc;AA0B/BY,EAAAA,YAAY,EAAE;AACZZ,IAAAA,eAAe,EAAE;AADL;AA1BiB,CAAlB,CAAf;AA+BA,gBAAe,gBAAoC;AAAA,MAAjCa,OAAiC,QAAjCA,OAAiC;AAAA,MAAxBlB,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBmB,IAAkB,QAAlBA,IAAkB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACjD,MAAMC,YAAY,GAAG,CAACxB,MAAM,CAACO,MAAR,CAArB;AACA,MAAMkB,UAAU,GAAG,CAACzB,MAAM,CAACG,IAAR,CAAnB;;AAEA,MAAImB,IAAI,KAAK,QAAb,EAAuB;AACrBE,IAAAA,YAAY,CAACE,IAAb,CAAkB1B,MAAM,CAACiB,YAAzB;AACD;;AAED,MAAIM,KAAK,KAAK,WAAd,EAA2B;AACzBC,IAAAA,YAAY,CAACE,IAAb,CAAkB1B,MAAM,CAACmB,eAAzB;AACAM,IAAAA,UAAU,CAACC,IAAX,CAAgB1B,MAAM,CAACM,aAAvB;AACD,GAHD,MAGO,IAAIiB,KAAK,KAAK,QAAd,EAAwB;AAC7BC,IAAAA,YAAY,CAACE,IAAb,CAAkB1B,MAAM,CAACoB,YAAzB;AACD;;AAED,SACE,KAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEC,OAA3B;AAAoC,IAAA,KAAK,EAAEG,YAA3C;AAAA,cACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,UAAb;AAAA,gBAA0BtB;AAA1B;AADF,IADF;AAKD,CApBD","sourcesContent":["import React from \"react\";\r\nimport { TouchableOpacity, StyleSheet, Text, Dimensions } from \"react-native\";\r\n\r\nconst screen = Dimensions.get(\"window\");\r\nconst buttonWidth = screen.width / 4;\r\n\r\nconst styles = StyleSheet.create({\r\n  text: {\r\n    color: \"#fff\",\r\n    fontSize: 25\r\n  },\r\n  textSecondary: {\r\n    color: \"#060606\"\r\n  },\r\n  button: {\r\n    backgroundColor: \"#333333\",\r\n    flex: 1,\r\n    height: Math.floor(buttonWidth - 10),\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    borderRadius: Math.floor(buttonWidth),\r\n    margin: 5\r\n  },\r\n  buttonDouble: {\r\n    width: screen.width / 2 - 10,\r\n    flex: 0,\r\n    alignItems: \"flex-start\",\r\n    paddingLeft: 40\r\n  },\r\n  buttonSecondary: {\r\n    backgroundColor: \"#a6a6a6\"\r\n  },\r\n  buttonAccent: {\r\n    backgroundColor: \"#f09a36\"\r\n  }\r\n});\r\n\r\nexport default ({ onPress, text, size, theme }) => {\r\n  const buttonStyles = [styles.button];\r\n  const textStyles = [styles.text];\r\n\r\n  if (size === \"double\") {\r\n    buttonStyles.push(styles.buttonDouble);\r\n  }\r\n\r\n  if (theme === \"secondary\") {\r\n    buttonStyles.push(styles.buttonSecondary);\r\n    textStyles.push(styles.textSecondary);\r\n  } else if (theme === \"accent\") {\r\n    buttonStyles.push(styles.buttonAccent);\r\n  }\r\n\r\n  return (\r\n    <TouchableOpacity onPress={onPress} style={buttonStyles}>\r\n      <Text style={textStyles}>{text}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}